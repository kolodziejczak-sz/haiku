---
import clsx from 'clsx';
import { useTranslation } from '@/features/i18n/useTranslation';
import { getProps } from '@/features/utils/getProps';
import Link from '@/components/Link.astro';
import Icon from '@/components/Icon.astro';

export interface Props {
  className?: string;
}

const t = useTranslation(Astro);
const { className } = getProps(Astro);

const pathname = Astro.canonicalURL.pathname.slice(1);
const [_lang, slug] = pathname.split('/');

const navList = [
  { to: '/', text: t`PrimaryNav.home` },
  { to: '/intro', text: t`PrimaryNav.intro` },
  { to: '/about-me', text: t`PrimaryNav.aboutMe` },
];

---
<nav class={clsx(className, 'nav')}>
  <Link to="#main-content" class="nav__skip nav__link">
    {t`PrimaryNav.skipToMainContent`}
  </Link>

  <Link to='/' class="nav__link">
    <span aria-hidden="true">{t`projectName`}</span>
    <img class="nav__logo" src="/logo.svg" alt={t`PrimaryNav.logoDescription`} />
  </Link>

  <button class="nav__toggle"
    aria-label={t`PrimaryNav.toggleMenu`}
    aria-expanded="false"
    aria-haspopup="true"
    data-js="nav-toggle"
  >
    <Icon name="ic:round-menu" aria-hidden="true" />
  </button>
  <ul
    class="nav__list"
    role="list"
    data-js="nav-list"
  >
    {navList.map(({ to, text }) => {
      const isActive = to.slice(1) === slug;
      const className = clsx('nav__link', { 'nav__link--active': isActive });

      return (
        <li class="nav__item">
          <Link to={to} class={className}>{text}</Link>
        </li>
      )
    })}
  </ul>
</nav>

<script>
  const desktopMenuMediaQuery = window.matchMedia('(min-width: 50em)')
  const navToggle = document.querySelector('[data-js="nav-toggle"]');
  const navList = document.querySelector('[data-js="nav-list"]');
  const firstLink = navList.querySelector('a');

  navToggle.onclick = () => {
    const expandedAttr = 'aria-expanded';
    const isExpanded = navToggle.getAttribute(expandedAttr) === 'true';
    const shouldOpen = !isExpanded;

    navToggle.setAttribute(expandedAttr, String(shouldOpen))

    if (!shouldOpen) return;

    firstLink.focus();

    const abortController = new AbortController();
    const { signal } = abortController;
    
    signal.addEventListener('abort', ({ target: { reason }}) => {
      navToggle.setAttribute(expandedAttr, 'false');
      if (reason === 'esc') {
        navToggle.focus();
      }
    }, { once: true });

    desktopMenuMediaQuery.addEventListener('change', () => {
      abortController.abort('mediaQuery');
    }, { once: true, signal })

    navList.addEventListener('focusout', ({ relatedTarget }) => {
      if (!navList.contains(relatedTarget)) {
        abortController.abort('focusout');
      }
    }, { signal });

    navList.addEventListener('keyup', ({ key }) => {
      const escHasBeenPressed = ['Esc', 'Escape'].includes(key);
      if (escHasBeenPressed) {
        abortController.abort('esc');
      }
    }, { signal });
  };
</script>